#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + '/../lib' 
require 'rubygems'
require 'commander/import'
require 'pomo'

program :version, Pomo::VERSION
program :description, 'Pomodoro time management'
program :int_message, "\nTerminated pomo" \
                      "\n  * previously running tasks not marked as complete" \
                      "\n  * manually complete a task with `$ pomo complete <task>`"

list = Pomo::List.new '~/.pomo'
 
command :start do |c|
  c.syntax = 'pomo start [number] [options]'
  c.summary = 'Start a task'
  c.description = 'Start a task, given the task [number] or the first task'
  c.example 'Start the first task', 'pomo start'
  c.example 'Start the first task', 'pomo start 0'
  c.example 'Start the first task', 'pomo start first'
  c.example 'Start the fifth task', 'pomo start 5'
  c.action do |args, options|
    if task = list.tasks.at(args.first ? args.first.to_i : 0)
      abort 'task already completed' if task.complete?
      say "Started #{task}, you have #{task.length} minutes :)"
      task.start
      list.save
    end
  end
end
alias_command :'start first', :start, '0'
alias_command :'start last', :start, list.tasks.length - 1
 
command :add do |c|
  c.syntax = 'pomo add <task> [options]'
  c.summary = 'Add a task'
  c.description = 'Add a task to the current list of tasks'
  c.example 'Adds the task "fix IE styling issues"', 'pomo add "fix IE styling issues"'
  c.example 'Add a task with 60 minute limit', 'pomo add "create executable" --length 60'
  c.option '-d', '--description string', 'Add verbose task description'
  c.option '-l', '--length minutes', Integer, 'Change the default length in minutes'
  c.action do |args, options|
   task = Pomo::Task.new(args.shift, options.__hash__)
   list << task
   list.save
   say "Task #{task} added"
  end
end

command :remove do |c|
  c.syntax = 'pomo [remove|rm] <number> [options]'
  c.summary = 'Remove a task'
  c.description = 'Remove a task, given the task <number>'
  c.example 'Remove the first task', 'pomo remove first'
  c.example 'Remove the last task', 'pomo remove last'
  c.example 'Remove the fifth task', 'pomo remove 5'
  c.example 'Remove the fifth task', 'pomo rm 5'
  c.action do |args, options|
   list.tasks.each_with_index do |task, i|
     if i == args.first.to_i
       list.tasks.delete_at i
       say "Removed #{task}"
     end
   end
   list.save
  end
end
alias_command :rm, :remove
alias_command :'remove first', :remove, '0'
alias_command :'remove last', :remove, list.tasks.length - 1

command :'remove all' do |c|
  c.syntax = 'pomo remove all'
  c.description = 'Remove all tasks'
  c.action do 
   list.tasks = []
   list.save
   say "Tasks removed"
  end
end
alias_command :'rm all', :'remove all'

command :view do |c|
  c.syntax = 'pomo view [number] [options]'
  c.summary = 'View a task'
  c.description = 'View verbose information for the given task [number] or the first task'
  c.example 'View the first task', 'pomo view first'
  c.example 'View the last task', 'pomo view last'
  c.example 'View the fifth task', 'pomo view 5'
  c.action do |args, options|
    if task = list.tasks.at(args.first ? args.first.to_i : 0)
      format = "%15s : %s\n"
      say format % ['name', task.name]
      say format % ['length', "#{task.length} minutes"]
      say format % ['description', task.description || '...']
    end
  end
end
alias_command :'view first', :view, '0'
alias_command :'view last', :view, list.tasks.length - 1

command :complete do |c|
  c.syntax = 'pomo complete [number] [options]'
  c.summary = 'Mark a task as completed'
  c.description = 'Mark the given task [number] or the first task to complete'
  c.example 'Mark first task as complete', 'pomo complete first'
  c.example 'Mark last task as complete', 'pomo complete last'
  c.example 'Mark fifth task as complete', 'pomo complete 5'
  c.action do |args, options|
    if task = list.tasks.at(args.first ? args.first.to_i : 0)
      task.complete = true
      list.save
      say "Completed #{task}"
    end
  end
end
alias_command :'complete first', :complete, '0'
alias_command :'complete last', :complete, list.tasks.length - 1

command :list do |c|
  c.syntax = 'pomo list [options]'
  c.description = 'List all tasks'
  c.example 'List all tasks', 'pomo list'
  c.action do |args, options|
   list.tasks.each_with_index do |task, i|
     say ' %s %2d. %-35s : %d minutes' % [task.complete? ? 'âˆš' : ' ', i, task.to_s, task.length]
   end
  end
end


