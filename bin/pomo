#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + '/../lib' 
require 'rubygems'
require 'commander/import'
require 'pomo'

program :version, Pomo::VERSION
program :description, 'Pomodoro time management'
program :int_message, "\nTerminated pomodoro; any tasks which were running will not be marked as complete"

list = Pomo::List.new '~/.pomo'
 
command :start do |c|
  c.syntax = 'pomo start [number] [options]'
  c.summary = 'Start a task'
  c.description = 'Start a task, given the task [number] or the first task'
  c.action do |args, options|
    task = list.tasks.at(args.first ? args.first.to_i : 0)
    say "Started #{task}, you have #{task.length} minutes :)"
    task.start
    list.save
  end
end
 
command :add do |c|
  c.syntax = 'pomo add <task> [options]'
  c.summary = 'Add a task'
  c.description = 'Add a task to the current list of tasks'
  c.example 'Adds the task "fix IE styling issues"', 'pomo add "fix IE styling issues"'
  c.example 'Add a task with 60 minute limit', 'pomo add "create executable" --length 60'
  c.option '-d', '--description string', 'Add verbose task description'
  c.option '-l', '--length minutes', Integer, 'Change the default length in minutes'
  c.action do |args, options|
   task = Pomo::Task.new(args.shift, options.__hash__)
   list << task
   list.save
   say "Task #{task} added"
  end
end

command :remove do |c|
  c.syntax = 'pomo [remove|rm] <number> [options]'
  c.summary = 'Remove a task'
  c.description = 'Remove a task, given the task <number>'
  c.action do |args, options|
   list.tasks.each_with_index do |task, i|
     if i == args.first.to_i
       list.tasks.delete_at i
       say "Removed #{task}"
     end
   end
   list.save
  end
end
alias_command :rm, :remove
alias_command :'remove first', :remove, '0'
alias_command :'remove last', :remove, list.tasks.length - 1

command :view do |c|
  c.syntax = 'pomo view [number] [options]'
  c.summary = 'View a task'
  c.description = 'View verbose information for the given task [number] or the first task'
  c.action do |args, options|
    if task = list.tasks.at(args.first ? args.first.to_i : 0)
      format = "%15s : %s\n"
      say format % ['name', task.name]
      say format % ['length', "#{task.length} minutes"]
      say format % ['description', task.description || '...']
    end
  end
end

command :list do |c|
  c.syntax = 'pomo list [options]'
  c.description = 'List all tasks'
  c.action do |args, options|
   list.tasks.each_with_index do |task, i|
     say ' %s %2d. %-35s : %d minutes' % [task.complete? ? 'âˆš' : ' ', i, task.to_s, task.length]
   end
  end
end


